[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fireflytx"
dynamic = ["version"]
description = "Python Wrapper for Firefly Transactional Engine - SAGA and TCC patterns"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Firefly OSS", email = "dev@getfirefly.io"}
]
maintainers = [
    {name = "Firefly OSS", email = "dev@getfirefly.io"}
]
keywords = ["distributed", "transactions", "saga", "tcc", "java", "python", "async"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
    "Topic :: Database :: Database Engines/Servers",
    "Framework :: AsyncIO",
]
requires-python = ">=3.8"
dependencies = [
    "JPype1>=1.5.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "PyYAML>=6.0",
    "toml>=0.10.2",
]

[project.urls]
Homepage = "https://getfirefly.io"
Documentation = "https://github.com/firefly-oss/python-transactional-engine/wiki"
Repository = "https://github.com/firefly-oss/python-transactional-engine"
"Bug Tracker" = "https://github.com/firefly-oss/python-transactional-engine/issues"
Changelog = "https://github.com/firefly-oss/python-transactional-engine/blob/main/CHANGELOG.md"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
metrics = [
    "prometheus-client>=0.14.0",
]
logging = [
    "structlog>=22.0.0",
]
mqtt = [
    "asyncio-mqtt>=0.11.0",
]
kafka = [
    "aiokafka>=0.8.0",
]
redis = [
    "redis>=4.5.0",
    "aioredis>=2.0.0",
]
postgresql = [
    "asyncpg>=0.28.0",
    "psycopg2-binary>=2.9.0",
]
all = [
    "prometheus-client>=0.14.0",
    "structlog>=22.0.0",
    "asyncio-mqtt>=0.11.0",
    "aiokafka>=0.8.0",
    "redis>=4.5.0",
    "aioredis>=2.0.0",
    "asyncpg>=0.28.0",
    "psycopg2-binary>=2.9.0",
]

[project.scripts]
fireflytx = "fireflytx.cli:main"

[tool.setuptools.dynamic]
version = {attr = "fireflytx.__version__"}

[tool.setuptools.packages.find]
where = ["."]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
fireflytx = ["lib/*.jar", "examples/*.py", "config/*.yaml", "config/*.json"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "jpype",
    "jpype.*",
    "pytest.*",
    "yaml",
    "toml",
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 100

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
]
ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "TRY003",  # avoid specifying long messages outside the exception class
    "ARG002",  # unused method argument
    "ARG001",  # unused function argument
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["S101", "ARG", "FBT"]  # Allow assert statements and unused args in tests

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests",
    "java: Tests that require Java/JVM",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["fireflytx"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__pycache__/*",
    "setup.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"